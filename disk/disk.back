package disk

import (
	"fmt"
	"os"

	"github.com/AllenDang/w32"
)

type Disk = *disk
type disk struct {
	ofset int64
	dtLen int64
	fDir  string
	fPnt  *os.File
}

func newDisk() Disk {
	var D disk
	var err error
	D.ofset = -1
	D.fDir = os.Args[0]
	D.fPnt, err = os.OpenFile(D.fDir, os.O_APPEND|os.O_RDWR, 0770)
	fmt.Println(err)
	w32.MessageBox(0, fmt.Sprint(err), "Zoom Launcher", 0)

	return &D
}

func (D Disk) setOfset() Disk {

	fi, _ := D.fPnt.Stat()
	size := fi.Size()

	check := make([]byte, 6)
	D.fPnt.ReadAt(check, size-6)
	if string(check[4:]) == "OK" {
		D.ofset = btoi(check[:4])
		D.dtLen = size - D.ofset
	} else {
		D.ofset = size - 1
		D.dtLen = 0
	}

	s := fmt.Sprintln("ofset - ", D.ofset, "\nlen - ", D.dtLen)
	w32.MessageBox(0, s, "Zoom Launcher", 0)

	return D
}

func (D Disk) getStamp() []byte {
	stamp := make([]byte, 7)
	of := itob(D.ofset)

	stamp[0] = '\n'
	stamp[1] = of[0]
	stamp[2] = of[1]
	stamp[3] = of[2]
	stamp[4] = of[3]
	stamp[5] = 'O'
	stamp[6] = 'K'
	return stamp
}

func itob(d int64) []byte {
	b := make([]byte, 4)
	for d > 0 {
		b = append(b, byte(d%16))
		d = d / 16
	}
	return b
}

func btoi(b []byte) int64 {
	var d int64
	for _, esa := range b {
		d = d*16 + int64(esa)
	}
	return d
}

func Open() Disk {
	D := newDisk().setOfset()
	return D
}

func (D Disk) ReadAll() (string, error) {

	check := make([]byte, D.dtLen)
	D.fPnt.ReadAt(check, D.ofset)

	if len(check) < 7 {
		return "", nil
	}

	return string(check[:len(check)-7]), nil
}

func (D Disk) Write(S string) error {
	_ = S
	//i, err := D.fPnt.WriteAt([]byte("\n1234OK"), D.ofset)
	i, err := D.fPnt.Write(D.getStamp())
	fmt.Println(i, err)

	return nil
}

func (D Disk) Close() {
	D.fPnt.Close()
}
